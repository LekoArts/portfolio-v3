---
import type { ImageMetadata } from 'astro'
import { Image } from '@unpic/astro'
import Base from '@layouts/base.astro'
import PhotographyText from '@assets/photography-body.mdx'
import SkipNavContent from '@components/a11y/skip-nav-content.astro'
import Container from '@components/primitives/container.astro'
import Prose from '@components/typography/prose.astro'
import Seo from '@components/seo.astro'
import Spacer from '@components/primitives/spacer.astro'
import { explanationLayoutWrapperStyle, layoutIconStyle, LAYOUT_TYPES } from './_photos.css'
import Text from '@components/typography/text.astro'
import Box from '@components/primitives/box.astro'
import SvgIcon from '@components/primitives/svg-icon.astro'
import Button from '@components/primitives/button/base.astro'
import TagGroup from '@components/blocks/tag-group.astro'
import Lightbox from '@components/images/lightbox.astro'
import WithLightbox from '@components/images/with-lightbox.astro'
import { getImageMetadata } from '@utils/photos'

const images = import.meta.glob<{ default: ImageMetadata }>('../content/photos/**/*.{jpeg,jpg,png}', { eager: true })

interface AlbumMapEntry {
	name: string
	order: number
	images: {
		title: string
		props: ImageMetadata
	}[]
}

const albumMap = new Map<string, AlbumMapEntry>()

for (const [path, module] of Object.entries(images)) {
	const metadata = getImageMetadata(path)
	const albumName = metadata.album
	const order = metadata.order

	if (!albumMap.has(albumName)) {
		albumMap.set(albumName, { name: albumName, order, images: [] })
	}

	albumMap.get(albumName)?.images.push({
		title: metadata.title,
		props: module.default,
	})
}

const albumNames = Array.from(albumMap.keys()).sort((a, b) => a.localeCompare(b))
const photos = Array.from(albumMap.values())
	.sort((a, b) => b.order - a.order)
	.flatMap((album) => album.images.map((img) => ({ ...img, album: album.name })))
---

<Base>
	<Seo
		slot="seo"
		title="Photos"
		description="With my Fujifilm cameras and lenses I primarily shoot landscape photos. I love Fuji's color science and enjoy editing my photos with Capture One."
		breadcrumbListItems={[{ name: `Photos`, url: `/photos/` }]}
	/>
	<SkipNavContent>
		<Container paddingTop={16}>
			<Prose>
				<h1>Photos</h1>
				<PhotographyText />
			</Prose>
			<Spacer axis="vertical" size={6} />
			<div class={explanationLayoutWrapperStyle}>
				<Text variant="prominent">Select individual albums to filter photos:</Text>
				<Box display="flex" flexDirection="row" alignItems="center" gap={4}>
					<Text variant="prominent">Layout:</Text>
					<Box display="flex" flexDirection="row" gap={1}>
						{
							LAYOUT_TYPES.map((layoutType) => {
								const title = `Switch to "${layoutType}" layout`

								return (
									<Button
										data-layout={layoutType}
										title={title}
										aria-label={title}
										variant="ghost"
										size="sm"
										class:list={[layoutIconStyle, 'button-layout']}
									>
										<SvgIcon height="1.25em" width="1.25em" id={layoutType} />
									</Button>
								)
							})
						}
					</Box>
				</Box>
			</div>
			<Spacer axis="vertical" size={6} />
			<TagGroup id="photos" items={albumNames} />
		</Container>
		<Spacer size={20} axis="vertical" />
		<Lightbox selector="lekoarts-lightbox">
			<div id="photos-img-wrapper">
				{
					photos.map((photo, index) => {
						const MAX_WIDTH = 720
						const aspectRatio = photo.props.width / photo.props.height
						const calculatedHeight = Math.round(MAX_WIDTH / aspectRatio)

						return (
							<WithLightbox
								class="tag-group-item"
								data-tags={photo.album}
								data-index={index}
								selector="lekoarts-lightbox"
								meta={photo.props}
							>
								<Image
									alt=""
									src={photo.props.src}
									height={calculatedHeight}
									width={MAX_WIDTH}
									layout="constrained"
									breakpoints={[720, 960, 1280, 1440, 2000]}
								/>
							</WithLightbox>
						)
					})
				}
			</div>
		</Lightbox>
		<Spacer axis="vertical" size={[20, null, null, 24]} />
	</SkipNavContent>
</Base>

<script>
	import type { LayoutType } from '@stores/ui'
	import { $ui } from '@stores/ui'
	import { gridImagesVariants, imageWrapperVariants } from './_photos.css'

	const layoutButtons = document.querySelectorAll<HTMLButtonElement>('.button-layout')
	const imgWrapper = document.getElementById('photos-img-wrapper') as HTMLElement
	const images = imgWrapper.querySelectorAll('img')

	layoutButtons.forEach((btn) => {
		btn.addEventListener('click', () => {
			$ui.setKey('photosLayout', btn.dataset.layout as LayoutType)
		})
	})

	$ui.subscribe(({ photosLayout }, oldValue) => {
		imgWrapper.className = imageWrapperVariants[photosLayout]

		images.forEach((img) => {
			if (!oldValue) {
				img.classList.add(gridImagesVariants[photosLayout])
				// eslint-disable-next-line style/brace-style
			} else {
				img.classList.replace(gridImagesVariants[oldValue.photosLayout], gridImagesVariants[photosLayout])
			}
		})

		layoutButtons.forEach((btn) => {
			btn.classList.toggle('active', btn.dataset.layout === photosLayout)
		})
	})
</script>
