---
import { slugify } from '@utils/slugify'
import { getCollection } from 'astro:content'
import { components } from '@components/mdx'
import Base from '@layouts/base.astro'
import { filterPublished } from '@utils/collection'
import { getReadingTime } from '@utils/reading-time'
import Container from '@components/primitives/container.astro'
import SkipNavContent from '@components/a11y/skip-nav-content.astro'
import Prose from '@components/typography/prose.astro'
import Spacer from '@components/primitives/spacer.astro'
import Box from '@components/primitives/box.astro'
import Link from '@components/primitives/link.astro'
import Text from '@components/typography/text.astro'
import {
	getMastodonShareLink,
	getTwitterShareLink,
	getWritingEditLink,
} from '@utils/sharing'
import { SITE } from '@constants/meta'
import { isoDateFormat, yearDateFormat } from '@utils/date'
import Heading from '@components/typography/heading.astro'
import { getEntry } from 'astro:content'
import Seo from '@components/seo.astro'
import { article } from '@constants/json-ld'
import type { Category } from '@constants/types'
import Tag from '@components/primitives/tag.astro'
import Toc from '@components/writing/toc.astro'
import { sidebarWrapperStyle } from './_writing.css'
import FormattedDate from '@components/primitives/formatted-date.astro'

export async function getStaticPaths() {
	const entries = await getCollection('writing', filterPublished)

	return entries.map((entry) => {
		const slug = slugify(entry.slug, entry.data.category.id)

		return {
			params: {
				writing: slug,
			},
			props: {
				entry,
				slug,
			},
		}
	})
}

const { entry, slug } = Astro.props
const { data: post } = entry
const { Content, headings } = await entry.render()

const timeToRead = getReadingTime(entry.body)
const category = await getEntry(post.category)

const tagColorSwitch = (name: Category) => {
	switch (name) {
		case `Community`:
			return `green`
		case `Design`:
			return `blue`
		case `JavaScript`:
			return `yellow`
		case `React`:
			return `teal`
		default:
			return `gray`
	}
}
---

<Base>
	<Seo
		title={post.title}
		description={post.description}
		image={post.image}
		slot="seo"
	>
		<meta name="twitter:label1" value="Time To Read" />
		<meta name="twitter:data1" value={timeToRead} />
		<meta name="twitter:label2" value="Category" />
		<meta name="twitter:data2" value={category.data.name} />
		<meta name="article:published_time" content={isoDateFormat(post.date)} />
		<meta
			name="article:modified_time"
			content={isoDateFormat(post.lastUpdated)}
		/>
		<script
			type="application/ld+json"
			is:inline
			set:html={JSON.stringify(
				article({
					isGarden: false,
					post: {
						title: post.title,
						description: post.description,
						date: isoDateFormat(post.date),
						lastUpdated: isoDateFormat(post.lastUpdated),
						year: yearDateFormat(post.date),
						image: post.image,
						slug,
					},
					category: {
						name: category.data.name,
						slug: `/${category.id}/`,
					},
				}),
			)}
		/>
	</Seo>
	<Container variant="proseRoot">
		<SkipNavContent>
			{
				post.type === 'tutorial' ? (
					<>
						<Heading as="h1">{post.title}</Heading>
						<Spacer size={6} axis="vertical" />
						<Box
							as="hr"
							height="px"
							width="full"
							bg="text"
							opacity={0.1}
							border="none"
						/>
						<Spacer size={4} axis="vertical" />
						<Box
							display="flex"
							justifyContent="space-between"
							flexDirection={[`column`, null, null, `row`]}
						>
							<Text marginBottom={2}>
								Created: <FormattedDate date={post.date} /> â€“ Last Updated:{' '}
								<FormattedDate date={post.lastUpdated} />
							</Text>
							<Tag
								marginBottom={2}
								colorScheme={tagColorSwitch(category.data.name as Category)}
								style={{ alignSelf: `flex-start` }}
							>
								{category.data.name}
							</Tag>
						</Box>
						<Spacer size={10} axis="vertical" />
					</>
				) : (
					<>
						<Text
							color="textEmphasized"
							fontWeight="medium"
							textAlign="center"
							fontSize={[`md`, null, null, `lg`, `lgx`]}
						>
							{category.data.name}
						</Text>
						<Spacer size={6} axis="vertical" />
						<Heading as="h1" textAlign="center">
							{post.title}
						</Heading>
						<Spacer size={16} axis="vertical" />
					</>
				)
			}
			{
				post.type === 'tutorial' ? (
					<Box
						flexDirection="row-reverse"
						justifyContent="flex-end"
						gap={20}
						class={sidebarWrapperStyle}
					>
						<Toc headings={headings} />
						<Prose as="article" style={{ flex: `1 1 100%`, minWidth: `100%` }}>
							<Content components={components} />
						</Prose>
					</Box>
				) : (
					<Prose>
						<Content components={components} />
					</Prose>
				)
			}
			<Spacer size={12} axis="vertical" />
			<Box
				as="hr"
				height="px"
				width="full"
				bg="text"
				opacity={0.1}
				border="none"
			/>
			<Spacer size={6} axis="vertical" />
			<Box
				display="flex"
				flexDirection={[`column`, `row`]}
				gap={5}
				justifyContent={[`flex-start`, `space-between`]}
				alignItems={[`flex-start`, `center`]}
			>
				<Box fontSize={[`md`, null, null, `lg`]} fontWeight="medium">
					{
						SITE.isPublic && (
							<>
								<Link href={getWritingEditLink(entry.id)}>Edit on GitHub</Link>{' '}
								-{' '}
							</>
						)
					}Share on <Link
						href={getTwitterShareLink(`${SITE.url}${slug}`, post.title)}
						>Twitter</Link
					> / <Link
						href={getMastodonShareLink(`${SITE.url}${slug}`, post.title)}
						>Mastodon</Link
					>
				</Box>
			</Box>
			{
				post.type === 'prose' && (
					<Text marginTop={6} fontSize={[`md`, null, null, `lg`]}>
						Last updated: <FormattedDate date={post.lastUpdated} />
					</Text>
				)
			}
		</SkipNavContent>
	</Container>
</Base>
